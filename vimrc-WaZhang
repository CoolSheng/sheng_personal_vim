
"========================================="
"vim-plug settings"
"========================================="
if has('nvim')
    call plug#begin('~/.local/share/nvim/plugged')
else
    call plug#begin('~/.vim/plugged')
endif


"========"
"Colorschemes"
"========"
Plug 'sheerun/vim-wombat-scheme'
Plug 'mhartington/oceanic-next'

Plug 'scrooloose/nerdtree'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'jiangmiao/auto-pairs'
Plug 'Yggdroot/indentLine'
Plug 'vim-scripts/taglist.vim'

"========"
"Code formatter"
"========"
" Add maktaba and codefmt to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
" Also add Glaive, which is used to configure codefmt's maktaba flags. See
" `:help :Glaive` for usage.
Plug 'google/vim-glaive'

"========"
"Auto complete"
"========"
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}

"========"
"Syntax checking
"========"
Plug 'vim-syntastic/syntastic'

"========"
"Commentary"
"========"
Plug 'tpope/vim-commentary'

"========"
"C/C++"
"========"
"CMake"
Plug 'vhdirk/vim-cmake', {'on': 'CMake'}

"Switching between header/source"
Plug 'derekwyatt/vim-fswitch', {'for': ['c', 'cpp', 'objc']}

"Single source file"
Plug 'xuhdev/SingleCompile'

"========"
"Rust"
"========"
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'racer-rust/vim-racer', {'for': 'rust'}
Plug 'timonv/vim-cargo'

"========"
"Go"
"========"
Plug 'fatih/vim-go' 

"========"
"Auto close tag"
"========"
Plug 'alvan/vim-closetag'

"========"
"JavaScript"
"========"
Plug 'elzr/vim-json',{'for': 'json'}
Plug 'pangloss/vim-javascript',{'for': 'javascript'}

"========"
"HTML5"
"========"
Plug 'othree/html5.vim',{'for': 'html'}

"========"
"Fast HTML"
"========"
Plug 'mattn/emmet-vim',{'for': 'html'}

"========"
"EJS Hightlight"
"========"
Plug 'briancollins/vim-jst'

"========"
"CSS"
"========"
Plug 'hail2u/vim-css3-syntax'

"========"
"LaTeX"
"========"
Plug 'lervag/vimtex'

"========"
"Ethereum"
"========"
"Solidity"
Plug 'tomlion/vim-solidity'

"========"
"Syntax"
"========"
Plug 'cespare/vim-toml'
Plug 'PotatoesMaster/i3-vim-syntax'

"========"
"TMux"
"========"
Plug 'tmux-plugins/vim-tmux'




call plug#end()

"========================================================"
"Glaive"
"========================================================"
call glaive#Install()

"========================================================"
"vim-codefmt settings"
"========================================================"
augroup autoformat_settings
    autocmd FileType bzl AutoFormatBuffer buildifier
    autocmd FileType c,cpp,proto AutoFormatBuffer clang-format
    autocmd FileType dart AutoFormatBuffer dartfmt
    autocmd FileType go AutoFormatBuffer gofmt
    autocmd FileType gn AutoFormatBuffer gn
    autocmd FileType html,css,javascript,json AutoFormatBuffer js-beautify
    autocmd FileType java AutoFormatBuffer clang-format
    autocmd FileType python AutoFormatBuffer yapf

augroup END

Glaive codefmt plugin[mappings]
Glaive codefmt clang_format_style="webkit"

"========================================================"
"Edit and source $MYVIMRC"
"========================================================"
nnoremap <Leader>ev :edit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>


"========================================================"
"NERDTree settings"
"========================================================"
let g:NERDTreeWinSize=32
"autocmd VimEnter * NERDTree
autocmd BufEnter * NERDTreeMirror

"CTRL-t to toggle tree view with CTRL-t
nmap <silent> <F2> :NERDTreeToggle<CR>
"Set F2 to put the cursor to the nerdtree
"nmap <silent> <F2> :NERDTreeFind<CR>

"========================================================"
"xclip"
"========================================================"
nmap <F7> :w !xclip<CR><CR>
vmap <F7> "*y
nmap <S-F7> :r!xclip -o<CR>

"========================================================"
"vim-airline settings"
"========================================================"
let g:airline_theme='wombat'
"set status line"
set laststatus=2
"enable powerline-fonts"
let g:airline_powerline_fonts=1

" enable tabline
let g:airline#extensions#tabline#enabled=1
" set left separator
let g:airline#extensions#tabline#left_sep=' '
" set left separator which are not editting
let g:airline#extensions#tabline#left_alt_sep='|'
" show buffer number
let g:airline#extensions#tabline#buffer_nr_show=1

"========================================================"
"indentLine settings"
"========================================================"
"let g:indentLine_color_term = 239

let g:indentLine_char = 'â”†'
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 1
let g:indentLine_enabled = 1             

"========================================================"
"YouCompleteMe"
"========================================================"
let g:ycm_rust_src_path = '/usr/src/rust/src'
let g:ycm_global_ycm_extra_conf = '~/.local/share/nvim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

"========================================================"
"FSwitch"
"========================================================"
map <F3> :FSSplitLeft<CR>
map <F4> :FSHere<CR>
map <F5> :FSSplitRight<CR>

"========================================================"
"cscope settings"
"========================================================"
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=1
    set cst
    set nocsverb
    " add any database in current directory "
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif

"find : Query for a pattern            (Usage: find c|d|e|f|g|i|s|t name)
"       c: Find functions calling this function
"       d: Find functions called by this function
"       e: Find this egrep pattern
"       f: Find this file
"       g: Find this definition
"       i: Find files #including this file
"       s: Find this C symbol
"       t: Find this text string
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


"===================================================="
"Settings for Makefile"
"===================================================="
autocmd FileType make nnoremap <Leader>r :wa<CR>:make <CR>
autocmd FileType make nnoremap <Leader>c :wa<CR>:make <CR>


"===================================================="
"Settings for C/C++"
"===================================================="
autocmd FileType c,cpp nnoremap <Leader>c :wa<CR>:make <CR>
autocmd FileType c,cpp nnoremap <Leader>r :SCCompileRun<CR>

"===================================================="
"Settings for Rust"
"===================================================="
autocmd FileType rust nnoremap <Leader>c :wa<CR>:CargoRun<CR>
autocmd FileType rust nnoremap <Leader>t :wa<CR>:CargoTest<CR>

"Ctags"
autocmd BufRead *.rs :setlocal tags=./rusty-tags.vi;/
autocmd BufWrite *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand('%:p:h') . "&"

"==================================================="
"Settings for Python"
"==================================================="
" Set <leader> c to compile progress "
autocmd FileType python nnoremap <Leader>r :w<CR>:!./% <CR>

"===================================================="
"Settings for Shell Script"
"===================================================="
" Set <leader> c to run shell script "
autocmd FileType sh nnoremap <Leader>r :w<CR>:!chmod +x % <CR>:!./% <CR>

"========================================================"
"Settings for Web Development"
"========================================================"
let g:vim_json_syntax_conceal = 0 

"========================================================"
"vim-racer"
"========================================================"
let g:racer_cmd = "/usr/bin/racer"
let g:racer_experimental_completer = 1

let g:rustfmt_autosave = 1


"========================================================"
"vim-syntastic settings "
"========================================================"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint'


"========================================================"
"vimtex-latexmk"
"========================================================"
"let g:vimtex_view_general_viewer = 'evince'
"let g:vimtex_view_general_options = '-w'

let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'

let g:vimtex_compiler_latexmk = {
    \ 'backend' : 'nvim',
    \ 'background' : 1,
    \ 'build_dir' : 'target',
    \ 'callback' : 1,
    \ 'continuous' : 1,
    \ 'options' : [
    \   '-xelatex',
    \   '-pdf',
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
\}

autocmd FileType tex nnoremap <Leader>c :VimtexCompile<CR>
autocmd FileType tex nnoremap <Leader>v :VimtexView<CR>

"========================================================"
"vim-css-color"
"========================================================"
let g:cssColorVimDoNotMessMyUpdatetime = 1

"========================================================"
"vim-closetag"
"========================================================"
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml"

"========================================================"
"VIM Settings"
"========================================================"

"Color scheme"
set t_Co=256
"colorscheme wombat 
colorscheme OceanicNext

set hidden

set clipboard=unnamed

set mouse=a

"Auto indent"
set cindent
set smartindent

"Show command"
set showcmd
"Show cursoline"
set cursorline

"Show line number"
set number
set relativenumber

"Space settings"
set expandtab
set tabstop=4
set shiftwidth=4

set wrap

"End of file"
set endofline

set scrolloff=3

set colorcolumn=80

if has("unix") 
    let s:uname = system("echo -n \"$(uname)\"")
    if s:uname == "Linux"
        "========"
        "Makefile"
        "========"
        if filereadable('/proc/cpuinfo')
            let &makeprg = 'make -j'.(system('grep -c ^processor /proc/cpuinfo')+1)
        endif

        "========"
        "Fcitx status"
        "from: https://fcitx.github.io/handbook/chapter-remote.html
        "========"
        let g:input_toggle = 0
        function! Fcitx2en()
           let s:input_status = system("fcitx-remote")
           if s:input_status == 2
               let g:input_toggle = 1
               let l:a = system("fcitx-remote -c")
           endif
        endfunction

        function! Fcitx2zh()
           let s:input_status = system("fcitx-remote")
           if s:input_status != 2 && g:input_toggle == 1
               let l:a = system("fcitx-remote -o")
               let g:input_toggle = 0
           endif
        endfunction

        autocmd InsertLeave * call Fcitx2en()
        autocmd InsertEnter * call Fcitx2zh()
    endif
    
    if s:uname == "Darwin"
        " Do Mac stuff here"
    endif
endif





